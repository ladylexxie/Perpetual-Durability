plugins { id "com.github.johnrengelman.shadow" version "7.1.2" }

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}+${rootProject.mc_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modCompileOnly("dev.latvian.mods:kubejs-fabric:${rootProject.kubejs_version}")

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.rei_version}")
    modCompileOnly("mezz.jei:jei-${rootProject.mc_version}-fabric:${rootProject.jei_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }
}

processResources {
    def toReplace = [
            "version"           : project.version,
            "mod_id"            : rootProject.mod_id,
            "mod_name"          : rootProject.mod_name,
            "mod_description"   : rootProject.mod_description,
            "fabric_api_version": rootProject.fabric_api_version,
            "mc_version"        : rootProject.mc_version,
            "rei_version"       : rootProject.rei_version,
            "kubejs_version"    : rootProject.kubejs_version
    ]

    inputs.properties toReplace
    filesMatching("fabric.mod.json") {
        expand toReplace
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar { classifier "dev" }

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
